name: Terraform CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read
  id-token: write
  issues: write
  actions: write

jobs:
  terraform:
    name: Terraform Operations
    runs-on: ubuntu-latest
    environment: prod
    env:
      TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
      TF_VAR_prod_account: ${{ secrets.PROD_ACCOUNT }}
      TF_VAR_s3_bucket: ${{ secrets.S3_BUCKET }}
      TF_VAR_ddb_table: ${{ secrets.DDB_TABLE }}
      TF_VAR_lambda_function_name: ${{ secrets.LAMBDA_FUNCTION_NAME }}
      TF_VAR_custom_domain: ${{ secrets.CUSTOM_DOMAIN }}
      TF_VAR_state_bucket: ${{ vars.STATE_BUCKET }}
      TF_VAR_state_key: ${{ vars.STATE_KEY }}
      TF_VAR_ddb_state_table: ${{ vars.DDB_STATE_TABLE }}

    defaults:
      run:
        working-directory: ./terraform
    
    # to prevent concurrent runs
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: false 
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.10.5
          terraform_wrapper: false 
      
      
      - name: Terraform Init
        id: init
        run: terraform init -input=false

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive -diff
        continue-on-error: true

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -input=false -no-color -out=tfplan
          terraform show -no-color tfplan > tfplan.txt
          echo "TERRAFORM_CHANGES=$(grep -c "Plan:" tfplan.txt | awk '{print $2}')" >> $GITHUB_ENV
          cat tfplan.txt
        continue-on-error: false
      
       
      - name: Check if Changes Exist
        id: changes
        run: |
          CHANGES=$(grep -c "No changes." tfplan.txt || true)
          if [ "$CHANGES" -gt 0 ]; then
            echo "No changes detected in Terraform plan"
            echo "HAS_CHANGES=false" >> $GITHUB_ENV
          else
            echo "Changes detected in Terraform plan"
            echo "HAS_CHANGES=true" >> $GITHUB_ENV
          fi
      
      - name: Check Changes and Proceed
        id: check_changes
        run: |
          if [ "${{ env.HAS_CHANGES }}" == "true" ]; then
            echo "Changes detected, manual approval needed"
          else
            echo "No changes detected, skipping approval"
          fi
      
      - name: Manual Approval
        uses: trstringer/manual-approval@v1
        if: env.HAS_CHANGES == 'true'
        with:
          secret: ${{ github.TOKEN }}
          approvers: tlew19
          minimum-approvals: 1
          issue-title: "Deploying to prod"
          issue-body: "Please approve or deny the deployment"
          exclude-workflow-initiator-as-approver: false
          additional-approved-words: ''
          additional-denied-words: ''
          timeout-minutes: 15


      - name: Terraform Apply
        if: env.HAS_CHANGES == 'true'
        id: apply
        run: |
          terraform apply -auto-approve -input=false tfplan
          echo "Apply completed successfully"

      - name: Trigger E2E Tests
        uses: halfnerdhalfhuman/resume-challenge-frontend/.github/workflows/front-end-E2E.yml@main